<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<html>
<body bgcolor="white">

<p>
These classes simplify the process of using Veriplace user/location discovery within
a servlet-based application.  The basic setup is that the application maintains a
{@link com.veriplace.web.VeriplaceContext} object, which creates a
{@link com.veriplace.web.VeriplaceState} for each servlet request; the application
calls VeriplaceState methods to specify what kind of information it requires from
Veriplace, which may cause the current request to be redirected; if successful, the
information becomes available as properties of the VeriplaceState.
</p>
<p>
There are several levels of simplification you can use for this process, depending on
the structure of your application:
</p>
<ul>
<li>
	If you derive your servlet class from {@link com.veriplace.web.servlet.AbstractVeriplaceServlet},
	you can specify the information your servlet needs from Veriplace with the 
	{@link com.veriplace.web.servlet.UsesVeriplace} annotation.
</li>
<li>
	If you use the Spring Web MVC framework, you can set up your Veriplace objects using
	the standard bean configuration system, and define interceptors
	({@link com.veriplace.web.spring.LocationDiscoveryInterceptor}, etc.) which will
	perform the necessary Veriplace requests before your controller executes.
</li>
<li>
	Within an ordinary JSP, you can use the Veriplace <a href="../../../../../../tags/index.html" target="_top">custom tag library</a>
	to access user and location data.
</li>
</ul>

</body>
</html>
